import numpy as np
import auto_diff as ad
from .util import NumGradCheck


class TestOpMax(NumGradCheck):

    def test_forward(self):
        val = np.random.random((3, 5))
        w = ad.array(val)
        y = w.transpose().max()
        actual = y.forward()
        expect = np.max(val)
        self.assertEqual((), y.shape)
        self.assertTrue(np.allclose(expect, actual), (expect, actual))
        y = w.transpose().max(axis=-1)
        actual = y.forward()
        expect = np.max(val, axis=0)
        self.assertEqual((5,), y.shape)
        self.assertTrue(np.allclose(expect, actual), (expect, actual))
        y = w.transpose().max(axis=0)
        actual = y.forward()
        expect = np.max(val, axis=-1)
        self.assertEqual((3,), y.shape)
        self.assertTrue(np.allclose(expect, actual), (expect, actual))
        y = w.transpose().max(axis=(0, -1))
        actual = y.forward()
        expect = np.max(val)
        self.assertEqual((), y.shape)
        self.assertTrue(np.allclose(expect, actual), (expect, actual))

    def test_forward_keepdims(self):
        val = np.random.random((3, 5))
        w = ad.array(val)
        y = ad.max(w.transpose(), keepdims=True)
        actual = y.forward()
        expect = np.max(val, keepdims=True)
        self.assertEqual((1, 1), y.shape)
        self.assertTrue(np.allclose(expect, actual), (expect, actual))
        y = w.transpose().max(axis=-1, keepdims=True)
        actual = y.forward()
        expect = np.transpose(np.max(val, axis=0, keepdims=True))
        self.assertEqual((5, 1), y.shape)
        self.assertTrue(np.allclose(expect, actual), (expect, actual))
        y = w.transpose().max(axis=0, keepdims=True)
        actual = y.forward()
        expect = np.transpose(np.max(val, axis=-1, keepdims=True))
        self.assertEqual((1, 3), y.shape)
        self.assertTrue(np.allclose(expect, actual), (expect, actual))
        y = w.transpose().max(axis=(0, -1), keepdims=True)
        actual = y.forward()
        expect = np.max(val, keepdims=True)
        self.assertEqual((1, 1), y.shape)
        self.assertTrue(np.allclose(expect, actual), (expect, actual))

    def test_backward(self):
        val = np.random.random((3, 5))
        w = ad.variable(val, name='W')
        y = w.transpose().max()
        self.numeric_gradient_check(y, {}, [w])
        y = w.transpose().max(axis=-1)
        self.numeric_gradient_check(y, {}, [w])
        y = w.transpose().max(axis=0)
        self.numeric_gradient_check(y, {}, [w])
        y = w.transpose().max(axis=(0, -1))
        self.numeric_gradient_check(y, {}, [w])
        val = np.random.random((3, 4, 5))
        w = ad.variable(val, name='W')
        y = w.transpose().max()
        self.numeric_gradient_check(y, {}, [w])
        y = w.transpose().max(axis=(0, 2)).max(axis=0)
        self.numeric_gradient_check(y, {}, [w])

    def test_backward_keepdims(self):
        val = np.random.random((3, 5))
        w = ad.variable(val, name='W')
        y = ad.max(w.transpose(), keepdims=True)
        self.numeric_gradient_check(y, {}, [w])
        y = w.transpose().max(axis=-1, keepdims=True)
        self.numeric_gradient_check(y, {}, [w])
        y = w.transpose().max(axis=0, keepdims=True)
        self.numeric_gradient_check(y, {}, [w])
        y = w.transpose().max(axis=(0, -1), keepdims=True)
        self.numeric_gradient_check(y, {}, [w])
        val = np.random.random((3, 4, 5))
        w = ad.variable(val, name='W')
        y = w.transpose().max(keepdims=True)
        self.numeric_gradient_check(y, {}, [w])
        y = w.transpose().max(axis=(0, 2), keepdims=True).max(axis=1, keepdims=True)
        self.numeric_gradient_check(y, {}, [w])

    def test_name(self):
        val = np.random.random((3, 5))
        w = ad.array(val, name='W')
        y = w.transpose().max()
        self.assertEqual('max(transpose(W))', y.__unicode__())
        y = w.transpose().max(axis=-1)
        self.assertEqual('max(transpose(W), axis=-1)', y.__unicode__())
        y = w.transpose().max(axis=0)
        self.assertEqual('max(transpose(W), axis=0)', y.__unicode__())
        y = w.transpose().max(axis=(0, -1))
        self.assertEqual('max(transpose(W), axis=(0, -1))', y.__unicode__())

    def test_name_keepdims(self):
        val = np.random.random((3, 5))
        w = ad.array(val, name='W')
        y = ad.max(w.transpose(), keepdims=True)
        self.assertEqual('max(transpose(W), keepdims=True)', y.__unicode__())
        y = w.transpose().max(axis=-1, keepdims=True)
        self.assertEqual('max(transpose(W), axis=-1, keepdims=True)', y.__unicode__())
        y = w.transpose().max(axis=0, keepdims=True)
        self.assertEqual('max(transpose(W), axis=0, keepdims=True)', y.__unicode__())
        y = w.transpose().max(axis=(0, -1), keepdims=True)
        self.assertEqual('max(transpose(W), axis=(0, -1), keepdims=True)', y.__unicode__())
